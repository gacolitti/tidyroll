% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/rsample_utils.R
\name{predict_rsample_nested}
\alias{predict_rsample_nested}
\title{Predict assessment data from nested split using recipe and model fit}
\usage{
predict_rsample_nested(
  split,
  recipe,
  fit,
  id_vars = "all",
  predict_options = NULL,
  new_steps = NULL,
  strings_as_factors = FALSE
)
}
\arguments{
\item{split}{An \code{rsplit} object created with \link{rolling_origin_nested}.}

\item{recipe}{An untrained recipe object.}

\item{fit}{A fitted model object.}

\item{id_vars}{A character vector of variables names to be returned along with the predictions. Default
is to keep all variables.}

\item{predict_options}{A named list of arguments passed to \code{predict}. For example, if the fitted
model is of class \code{merMod} \code{list(allow.new.levels = TRUE)} may be appropriate.}

\item{new_steps}{A sequence of steps created using \code{expr} or \code{exprs} from \code{rlang}.
This argument adds steps to end of a \code{recipe} before \code{bake}.
This is useful if you want to add steps based on the prediction date.
For example, perhaps some predictors are observed at a specific
time; so depending on the prediction date, these data cannot be used for prediction. This
argument can be used to impute observations that use data after the predicted date.
Reference the predicted date with \code{pred_date} (see examples).}

\item{strings_as_factors}{A logical: should character columns be converted to factors? This
affects the preprocessed training set (when retain = TRUE) as well as the results of
bake.recipe. Unlike \code{prep()}, the default is \code{FALSE}.}
}
\description{
This function facilitates extracting, baking, and predicting \code{assessment} data from a nested
split object created with \code{rolling_origin_nested}. Baking requires a \code{recipe} object
and predicting requires a fitted model object.
}
\examples{

\dontrun{
data(airquality2)

roll <- rolling_origin_nested(
  data = airquality2,
  time_var = "date",
  unit = "week",
  round_fun = lubridate::round_date
)
rec <-
  recipe(data = airquality2 \%>\% slice(0), ozone ~ temp + ozone_sample + ozone_sample_date) \%>\%
  update_role(ozone_sample_date, new_role = "id")

roll2 <- roll \%>\% mutate(recipe = list(rec))

roll2$fits <-
  map2(roll2$splits, roll2$recipe, fit_rsample_nested, model_func = lm)

roll2$predictions <-
 pmap(
   lst(
    split = roll2$splits,
    recipe = roll2$recipe,
    fit = roll2$fits
  ),
  predict_rsample_nested,
  new_steps = exprs(
    step_mutate_at(
      ozone_sample,
      fn = ~ if_else(ozone_sample_date < pred_date, ozone_sample, as.numeric(NA))),
    step_meanimpute(ozone_sample))
)
}

}
